{"ast":null,"code":"// postFeedSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const fetchPosts = createAsyncThunk('postFeed/fetchPosts', async ({\n  currentPage,\n  batchSize\n}, thunkAPI) => {\n  try {\n    const token = localStorage.getItem('Token');\n    const responses = await Promise.all(Array.from({\n      length: batchSize\n    }, (_, i) => axios.get(`http://127.0.0.1:8000/api/post?page=${currentPage + i}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })));\n    const newPosts = responses.flatMap((response, i) => response.data.data);\n    return newPosts;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  posts: [],\n  loading: false,\n  currentPage: 1,\n  hasMore: true,\n  batchSize: 3,\n  error: null\n};\nconst PostFeedSlice = createSlice({\n  name: 'postFeed',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts = [...state.posts, ...action.payload];\n      state.currentPage += state.batchSize;\n      state.hasMore = action.payload.length === state.batchSize; // Установим hasMore в false, если загружено меньше batchSize записей\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default PostFeedSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPosts","currentPage","batchSize","thunkAPI","token","localStorage","getItem","responses","Promise","all","Array","from","length","_","i","get","headers","Authorization","newPosts","flatMap","response","data","error","rejectWithValue","message","initialState","posts","loading","hasMore","PostFeedSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/Yakov/Documents/Programming/React JS/social-media-frontend/src/redux/PostFeedSlice.js"],"sourcesContent":["// postFeedSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'postFeed/fetchPosts',\r\n  async ({ currentPage, batchSize }, thunkAPI) => {\r\n    try {\r\n      const token = localStorage.getItem('Token');\r\n      const responses = await Promise.all(\r\n        Array.from({ length: batchSize }, (_, i) =>\r\n          axios.get(`http://127.0.0.1:8000/api/post?page=${currentPage + i}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          })\r\n        )\r\n      );\r\n      const newPosts = responses.flatMap((response, i) => response.data.data);\r\n      return newPosts;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  loading: false,\r\n  currentPage: 1,\r\n  hasMore: true,\r\n  batchSize: 3,\r\n  error: null,\r\n};\r\n\r\nconst PostFeedSlice = createSlice({\r\n  name: 'postFeed',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.posts = [...state.posts, ...action.payload];\r\n        state.currentPage += state.batchSize;\r\n        state.hasMore = action.payload.length === state.batchSize; // Установим hasMore в false, если загружено меньше batchSize записей\r\n      })\r\n      \r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default PostFeedSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CACxC,qBAAqB,EACrB,OAAO;EAAEG,WAAW;EAAEC;AAAU,CAAC,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CACjCC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEV;IAAU,CAAC,EAAE,CAACW,CAAC,EAAEC,CAAC,KACrCf,KAAK,CAACgB,GAAG,CAAE,uCAAsCd,WAAW,GAAGa,CAAE,EAAC,EAAE;MAClEE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASb,KAAM;MACjC;IACF,CAAC,CACH,CACF,CAAC;IACD,MAAMc,QAAQ,GAAGX,SAAS,CAACY,OAAO,CAAC,CAACC,QAAQ,EAAEN,CAAC,KAAKM,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC;IACvE,OAAOH,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOnB,QAAQ,CAACoB,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACd1B,WAAW,EAAE,CAAC;EACd2B,OAAO,EAAE,IAAI;EACb1B,SAAS,EAAE,CAAC;EACZoB,KAAK,EAAE;AACT,CAAC;AAED,MAAMO,aAAa,GAAGhC,WAAW,CAAC;EAChCiC,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClC,UAAU,CAACmC,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACT,OAAO,GAAG,IAAI;MACpBS,KAAK,CAACd,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDY,OAAO,CAAClC,UAAU,CAACqC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACV,KAAK,GAAG,CAAC,GAAGU,KAAK,CAACV,KAAK,EAAE,GAAGY,MAAM,CAACC,OAAO,CAAC;MACjDH,KAAK,CAACnC,WAAW,IAAImC,KAAK,CAAClC,SAAS;MACpCkC,KAAK,CAACR,OAAO,GAAGU,MAAM,CAACC,OAAO,CAAC3B,MAAM,KAAKwB,KAAK,CAAClC,SAAS,CAAC,CAAC;IAC7D,CAAC,CAAC,CAEDgC,OAAO,CAAClC,UAAU,CAACwC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeV,aAAa,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
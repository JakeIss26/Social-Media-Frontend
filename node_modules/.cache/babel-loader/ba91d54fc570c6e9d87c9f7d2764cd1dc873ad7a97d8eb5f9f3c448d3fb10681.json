{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yakov\\\\Documents\\\\Programming\\\\React JS\\\\social-media-frontend\\\\src\\\\components\\\\PostFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../redux/PostFeedSlice';\nimport '../css/post.css';\nimport PostComponent from './PostComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostFeed() {\n  _s();\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const batchSize = 10; // Количество постов, загружаемых за раз\n  const token = useSelector(state => state.auth.token);\n  const posts = useSelector(state => state.postFeed.posts);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await dispatch(fetchPosts({\n          currentPage,\n          batchSize,\n          token\n        }));\n        const newPosts = response.payload;\n        if (newPosts.length === 0) {\n          setHasMore(false);\n        } else {\n          setCurrentPage(prevPage => prevPage + 1);\n        }\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (token && hasMore && !loading) {\n      fetchData();\n    }\n  }, [dispatch, currentPage, token, loading, hasMore]);\n  const handleObserver = entities => {\n    const target = entities[0];\n    if (target.isIntersecting && hasMore && !loading) {\n      fetchData();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-count\",\n      children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043F\\u043E\\u0441\\u0442\\u043E\\u0432: \", posts.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"end-of-list\",\n      style: {\n        height: '10px',\n        background: 'transparent'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(PostFeed, \"U0tJ9vAHvKrQZ5GemJEn+VGVvV0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostFeed;\nexport default PostFeed;\nvar _c;\n$RefreshReg$(_c, \"PostFeed\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchPosts","PostComponent","jsxDEV","_jsxDEV","PostFeed","_s","dispatch","currentPage","setCurrentPage","loading","setLoading","hasMore","setHasMore","batchSize","token","state","auth","posts","postFeed","fetchData","response","newPosts","payload","length","prevPage","error","console","handleObserver","entities","target","isIntersecting","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","style","height","background","_c","$RefreshReg$"],"sources":["C:/Users/Yakov/Documents/Programming/React JS/social-media-frontend/src/components/PostFeed.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPosts } from '../redux/PostFeedSlice';\r\nimport '../css/post.css';\r\nimport PostComponent from './PostComponent';\r\n\r\nfunction PostFeed() {\r\n  const dispatch = useDispatch();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const batchSize = 10; // Количество постов, загружаемых за раз\r\n  const token = useSelector(state => state.auth.token);\r\n  const posts = useSelector(state => state.postFeed.posts);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await dispatch(fetchPosts({ currentPage, batchSize, token }));\r\n        const newPosts = response.payload;\r\n        if (newPosts.length === 0) {\r\n          setHasMore(false);\r\n        } else {\r\n          setCurrentPage(prevPage => prevPage + 1);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (token && hasMore && !loading) {\r\n      fetchData();\r\n    }\r\n  }, [dispatch, currentPage, token, loading, hasMore]);\r\n\r\n  const handleObserver = (entities) => {\r\n    const target = entities[0];\r\n    if (target.isIntersecting && hasMore && !loading) {\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <div className=\"post-count\">\r\n        Количество постов: {posts.length}\r\n      </div>\r\n      {posts.map(post => (\r\n        <PostComponent key={post.id} post={post} />\r\n      ))}\r\n      <div id=\"end-of-list\" style={{ height: '10px', background: 'transparent' }}></div>\r\n      {loading && <p>Loading...</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostFeed;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
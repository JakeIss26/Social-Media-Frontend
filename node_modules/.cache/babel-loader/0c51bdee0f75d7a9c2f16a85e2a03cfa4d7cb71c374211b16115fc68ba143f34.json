{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yakov\\\\Documents\\\\Programming\\\\React JS\\\\social-media-frontend\\\\src\\\\components\\\\PostFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport '../css/post.css';\nimport PostComponent from './PostComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostFeed() {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.postFeed.posts);\n  const loading = useSelector(state => state.postFeed.loading);\n  const currentPage = useSelector(state => state.postFeed.currentPage);\n  const hasMore = useSelector(state => state.postFeed.hasMore);\n  const batchSize = useSelector(state => state.postFeed.batchSize);\n  const token = useSelector(state => state.auth.token); // Получение токена из состояния Redux\n  const observer = useRef();\n  useEffect(() => {\n    // Запрашиваем посты только если есть токен и у нас нет ни одного поста\n    if (token && posts.length === 0) {\n      dispatch(fetchPosts({\n        currentPage,\n        batchSize,\n        token\n      }));\n    }\n  }, [dispatch, token, posts.length, currentPage, batchSize]);\n  useEffect(() => {\n    observer.current = new IntersectionObserver(handleObserver, {\n      threshold: 0.5\n    });\n    if (observer.current) {\n      observer.current.observe(document.querySelector('#end-of-list'));\n    }\n  }, []);\n  const handleObserver = entities => {\n    const target = entities[0];\n    if (target.isIntersecting && hasMore && !loading) {\n      dispatch(fetchPosts({\n        currentPage,\n        batchSize,\n        token\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-count\",\n      children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043F\\u043E\\u0441\\u0442\\u043E\\u0432: \", posts.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"end-of-list\",\n      style: {\n        height: '10px',\n        background: 'transparent'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(PostFeed, \"y0QtmIu55ThpWNoyOBDtKVINOTs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = PostFeed;\nexport default PostFeed;\nvar _c;\n$RefreshReg$(_c, \"PostFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useDispatch","useSelector","PostComponent","jsxDEV","_jsxDEV","PostFeed","_s","dispatch","posts","state","postFeed","loading","currentPage","hasMore","batchSize","token","auth","observer","length","fetchPosts","current","IntersectionObserver","handleObserver","threshold","observe","document","querySelector","entities","target","isIntersecting","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","style","height","background","_c","$RefreshReg$"],"sources":["C:/Users/Yakov/Documents/Programming/React JS/social-media-frontend/src/components/PostFeed.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport '../css/post.css';\r\nimport PostComponent from './PostComponent';\r\n\r\nfunction PostFeed() {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(state => state.postFeed.posts);\r\n  const loading = useSelector(state => state.postFeed.loading);\r\n  const currentPage = useSelector(state => state.postFeed.currentPage);\r\n  const hasMore = useSelector(state => state.postFeed.hasMore);\r\n  const batchSize = useSelector(state => state.postFeed.batchSize);\r\n  const token = useSelector(state => state.auth.token); // Получение токена из состояния Redux\r\n  const observer = useRef();\r\n\r\n  useEffect(() => {\r\n    // Запрашиваем посты только если есть токен и у нас нет ни одного поста\r\n    if (token && posts.length === 0) {\r\n      dispatch(fetchPosts({ currentPage, batchSize, token }));\r\n    }\r\n  }, [dispatch, token, posts.length, currentPage, batchSize]);\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver(handleObserver, { threshold: 0.5 });\r\n    if (observer.current) {\r\n      observer.current.observe(document.querySelector('#end-of-list'));\r\n    }\r\n  }, []);\r\n\r\n  const handleObserver = (entities) => {\r\n    const target = entities[0];\r\n    if (target.isIntersecting && hasMore && !loading) {\r\n      dispatch(fetchPosts({ currentPage, batchSize, token }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <div className=\"post-count\">\r\n        Количество постов: {posts.length}\r\n      </div>\r\n      {posts.map(post => (\r\n        <PostComponent key={post.id} post={post} />\r\n      ))}\r\n      <div id=\"end-of-list\" style={{ height: '10px', background: 'transparent' }}></div>\r\n      {loading && <p>Loading...</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostFeed;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}